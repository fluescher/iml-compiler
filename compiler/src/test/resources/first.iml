program intDiv
global
	var m:int32;
	proc divide(in copy m:int32, in copy n:int32, out ref q:int32, out ref r:int32)
	requires [n > 0]
	ensures [somePost: (((((((r < n))))))) ]
	{
		q init := 0;
		r init := m;
		while (r >= n) {
			q := q + 1;
			r := r - n
		}
	};
	fun multiply(in copy m:int32, in copy n:int32)
	returns r:int32
	requires [positive:isPositive(n)]
	{
		i init := 0;
		r init := m;
		while (i < n) {
			i := i + 1;
			r := r + m
		}
	};
	
	
	
	var n:int32;
	var q:int32;
	var r:int32
{
	? m init;
	? n init;
	call divide(m, n, q init, r init);
	! q;
	! r
}